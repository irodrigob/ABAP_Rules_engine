*---------------------------------------------------------------------*
*    view related FORM routines
*---------------------------------------------------------------------*
*...processing: ZRLE_V001.......................................*
FORM GET_DATA_ZRLE_V001.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZRLE_T003 WHERE
(VIM_WHERETAB) .
    CLEAR ZRLE_V001 .
ZRLE_V001-MANDT =
ZRLE_T003-MANDT .
ZRLE_V001-APPLICATION =
ZRLE_T003-APPLICATION .
ZRLE_V001-PROCESS_NAME =
ZRLE_T003-PROCESS_NAME .
ZRLE_V001-RULE_NAME =
ZRLE_T003-RULE_NAME .
ZRLE_V001-START_PROCESS =
ZRLE_T003-START_PROCESS .
ZRLE_V001-RULE_NAME_THEN =
ZRLE_T003-RULE_NAME_THEN .
ZRLE_V001-RULE_NAME_ELSE =
ZRLE_T003-RULE_NAME_ELSE .
    SELECT SINGLE * FROM ZRLE_T001 WHERE
APPLICATION = ZRLE_T003-APPLICATION AND
RULE_NAME = ZRLE_T003-RULE_NAME .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZRLE_T001T WHERE
APPLICATION = ZRLE_T001-APPLICATION AND
RULE_NAME = ZRLE_T001-RULE_NAME AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZRLE_V001-RULE_DESC =
ZRLE_T001T-RULE_DESC .
      ENDIF.
    ENDIF.
    SELECT SINGLE * FROM ZRLE_T002 WHERE
APPLICATION = ZRLE_T003-APPLICATION AND
PROCESS_NAME = ZRLE_T003-PROCESS_NAME .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZRLE_T002T WHERE
APPLICATION = ZRLE_T002-APPLICATION AND
PROCESS_NAME = ZRLE_T002-PROCESS_NAME AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
      ENDIF.
    ENDIF.
<VIM_TOTAL_STRUC> = ZRLE_V001.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZRLE_V001 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZRLE_V001.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZRLE_V001-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZRLE_T003 WHERE
  APPLICATION = ZRLE_V001-APPLICATION AND
  PROCESS_NAME = ZRLE_V001-PROCESS_NAME AND
  RULE_NAME = ZRLE_V001-RULE_NAME .
    IF SY-SUBRC = 0.
    DELETE ZRLE_T003 .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZRLE_T003 WHERE
  APPLICATION = ZRLE_V001-APPLICATION AND
  PROCESS_NAME = ZRLE_V001-PROCESS_NAME AND
  RULE_NAME = ZRLE_V001-RULE_NAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZRLE_T003.
    ENDIF.
ZRLE_T003-MANDT =
ZRLE_V001-MANDT .
ZRLE_T003-APPLICATION =
ZRLE_V001-APPLICATION .
ZRLE_T003-PROCESS_NAME =
ZRLE_V001-PROCESS_NAME .
ZRLE_T003-RULE_NAME =
ZRLE_V001-RULE_NAME .
ZRLE_T003-START_PROCESS =
ZRLE_V001-START_PROCESS .
ZRLE_T003-RULE_NAME_THEN =
ZRLE_V001-RULE_NAME_THEN .
ZRLE_T003-RULE_NAME_ELSE =
ZRLE_V001-RULE_NAME_ELSE .
    IF SY-SUBRC = 0.
    UPDATE ZRLE_T003 ##WARN_OK.
    ELSE.
    INSERT ZRLE_T003 .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZRLE_V001-UPD_FLAG,
STATUS_ZRLE_V001-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZRLE_V001.
  SELECT SINGLE * FROM ZRLE_T003 WHERE
APPLICATION = ZRLE_V001-APPLICATION AND
PROCESS_NAME = ZRLE_V001-PROCESS_NAME AND
RULE_NAME = ZRLE_V001-RULE_NAME .
ZRLE_V001-MANDT =
ZRLE_T003-MANDT .
ZRLE_V001-APPLICATION =
ZRLE_T003-APPLICATION .
ZRLE_V001-PROCESS_NAME =
ZRLE_T003-PROCESS_NAME .
ZRLE_V001-RULE_NAME =
ZRLE_T003-RULE_NAME .
ZRLE_V001-START_PROCESS =
ZRLE_T003-START_PROCESS .
ZRLE_V001-RULE_NAME_THEN =
ZRLE_T003-RULE_NAME_THEN .
ZRLE_V001-RULE_NAME_ELSE =
ZRLE_T003-RULE_NAME_ELSE .
    SELECT SINGLE * FROM ZRLE_T001 WHERE
APPLICATION = ZRLE_T003-APPLICATION AND
RULE_NAME = ZRLE_T003-RULE_NAME .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZRLE_T001T WHERE
APPLICATION = ZRLE_T001-APPLICATION AND
RULE_NAME = ZRLE_T001-RULE_NAME AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZRLE_V001-RULE_DESC =
ZRLE_T001T-RULE_DESC .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZRLE_V001-RULE_DESC .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZRLE_V001-RULE_DESC .
    ENDIF.
    SELECT SINGLE * FROM ZRLE_T002 WHERE
APPLICATION = ZRLE_T003-APPLICATION AND
PROCESS_NAME = ZRLE_T003-PROCESS_NAME .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZRLE_T002T WHERE
APPLICATION = ZRLE_T002-APPLICATION AND
PROCESS_NAME = ZRLE_T002-PROCESS_NAME AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
      ELSE.
        CLEAR SY-SUBRC.
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZRLE_V001 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZRLE_V001-APPLICATION TO
ZRLE_T003-APPLICATION .
MOVE ZRLE_V001-PROCESS_NAME TO
ZRLE_T003-PROCESS_NAME .
MOVE ZRLE_V001-RULE_NAME TO
ZRLE_T003-RULE_NAME .
MOVE ZRLE_V001-MANDT TO
ZRLE_T003-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZRLE_T003'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZRLE_T003 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZRLE_T003'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZRLE_V001 USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZRLE_T003-MANDT =
ZRLE_V001-MANDT .
ZRLE_T003-APPLICATION =
ZRLE_V001-APPLICATION .
ZRLE_T003-PROCESS_NAME =
ZRLE_V001-PROCESS_NAME .
ZRLE_T003-RULE_NAME =
ZRLE_V001-RULE_NAME .
ZRLE_T003-START_PROCESS =
ZRLE_V001-START_PROCESS .
ZRLE_T003-RULE_NAME_THEN =
ZRLE_V001-RULE_NAME_THEN .
ZRLE_T003-RULE_NAME_ELSE =
ZRLE_V001-RULE_NAME_ELSE .
    SELECT SINGLE * FROM ZRLE_T001 WHERE
APPLICATION = ZRLE_T003-APPLICATION AND
RULE_NAME = ZRLE_T003-RULE_NAME .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZRLE_T001T WHERE
APPLICATION = ZRLE_T001-APPLICATION AND
RULE_NAME = ZRLE_T001-RULE_NAME AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
ZRLE_V001-RULE_DESC =
ZRLE_T001T-RULE_DESC .
      ELSE.
        CLEAR SY-SUBRC.
        CLEAR ZRLE_V001-RULE_DESC .
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZRLE_V001-RULE_DESC .
    ENDIF.
    SELECT SINGLE * FROM ZRLE_T002 WHERE
APPLICATION = ZRLE_T003-APPLICATION AND
PROCESS_NAME = ZRLE_T003-PROCESS_NAME .
    IF SY-SUBRC EQ 0.
      SELECT SINGLE * FROM ZRLE_T002T WHERE
APPLICATION = ZRLE_T002-APPLICATION AND
PROCESS_NAME = ZRLE_T002-PROCESS_NAME AND
SPRAS = SY-LANGU .
      IF SY-SUBRC EQ 0.
      ELSE.
        CLEAR SY-SUBRC.
      ENDIF.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*...processing: ZRLE_V002.......................................*
FORM GET_DATA_ZRLE_V002.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZRLE_T001 WHERE
(VIM_WHERETAB) .
    CLEAR ZRLE_V002 .
ZRLE_V002-MANDT =
ZRLE_T001-MANDT .
ZRLE_V002-APPLICATION =
ZRLE_T001-APPLICATION .
ZRLE_V002-RULE_NAME =
ZRLE_T001-RULE_NAME .
ZRLE_V002-CONTROLLER_CLASS =
ZRLE_T001-CONTROLLER_CLASS .
    SELECT SINGLE * FROM ZRLE_T007 WHERE
APPLICATION = ZRLE_T001-APPLICATION .
    IF SY-SUBRC EQ 0.
    ENDIF.
    SELECT SINGLE * FROM ZRLE_T001T WHERE
APPLICATION = ZRLE_T001-APPLICATION AND
RULE_NAME = ZRLE_T001-RULE_NAME AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZRLE_V002-RULE_DESC =
ZRLE_T001T-RULE_DESC .
    ENDIF.
<VIM_TOTAL_STRUC> = ZRLE_V002.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZRLE_V002 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZRLE_V002.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZRLE_V002-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZRLE_T001 WHERE
  APPLICATION = ZRLE_V002-APPLICATION AND
  RULE_NAME = ZRLE_V002-RULE_NAME .
    IF SY-SUBRC = 0.
    DELETE ZRLE_T001 .
    ENDIF.
    DELETE FROM ZRLE_T001T WHERE
    APPLICATION = ZRLE_T001-APPLICATION AND
    RULE_NAME = ZRLE_T001-RULE_NAME .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZRLE_T001 WHERE
  APPLICATION = ZRLE_V002-APPLICATION AND
  RULE_NAME = ZRLE_V002-RULE_NAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZRLE_T001.
    ENDIF.
ZRLE_T001-MANDT =
ZRLE_V002-MANDT .
ZRLE_T001-APPLICATION =
ZRLE_V002-APPLICATION .
ZRLE_T001-RULE_NAME =
ZRLE_V002-RULE_NAME .
ZRLE_T001-CONTROLLER_CLASS =
ZRLE_V002-CONTROLLER_CLASS .
    IF SY-SUBRC = 0.
    UPDATE ZRLE_T001 ##WARN_OK.
    ELSE.
    INSERT ZRLE_T001 .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZRLE_T001T WHERE
    APPLICATION = ZRLE_T001-APPLICATION AND
    RULE_NAME = ZRLE_T001-RULE_NAME AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZRLE_T001T.
ZRLE_T001T-APPLICATION =
ZRLE_T001-APPLICATION .
ZRLE_T001T-RULE_NAME =
ZRLE_T001-RULE_NAME .
ZRLE_T001T-SPRAS =
SY-LANGU .
      ENDIF.
ZRLE_T001T-RULE_DESC =
ZRLE_V002-RULE_DESC .
    IF SY-SUBRC = 0.
    UPDATE ZRLE_T001T ##WARN_OK.
    ELSE.
    INSERT ZRLE_T001T .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZRLE_V002-UPD_FLAG,
STATUS_ZRLE_V002-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZRLE_V002.
  SELECT SINGLE * FROM ZRLE_T001 WHERE
APPLICATION = ZRLE_V002-APPLICATION AND
RULE_NAME = ZRLE_V002-RULE_NAME .
ZRLE_V002-MANDT =
ZRLE_T001-MANDT .
ZRLE_V002-APPLICATION =
ZRLE_T001-APPLICATION .
ZRLE_V002-RULE_NAME =
ZRLE_T001-RULE_NAME .
ZRLE_V002-CONTROLLER_CLASS =
ZRLE_T001-CONTROLLER_CLASS .
    SELECT SINGLE * FROM ZRLE_T007 WHERE
APPLICATION = ZRLE_T001-APPLICATION .
    IF SY-SUBRC EQ 0.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
    SELECT SINGLE * FROM ZRLE_T001T WHERE
APPLICATION = ZRLE_T001-APPLICATION AND
RULE_NAME = ZRLE_T001-RULE_NAME AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZRLE_V002-RULE_DESC =
ZRLE_T001T-RULE_DESC .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZRLE_V002-RULE_DESC .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZRLE_V002 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZRLE_V002-APPLICATION TO
ZRLE_T001-APPLICATION .
MOVE ZRLE_V002-RULE_NAME TO
ZRLE_T001-RULE_NAME .
MOVE ZRLE_V002-MANDT TO
ZRLE_T001-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZRLE_T001'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZRLE_T001 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZRLE_T001'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZRLE_T001-APPLICATION TO
ZRLE_T001T-APPLICATION .
MOVE ZRLE_T001-RULE_NAME TO
ZRLE_T001T-RULE_NAME .
MOVE SY-LANGU TO
ZRLE_T001T-SPRAS .
MOVE ZRLE_V002-MANDT TO
ZRLE_T001T-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZRLE_T001T'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZRLE_T001T TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZRLE_T001T'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
FORM COMPL_ZRLE_V002 USING WORKAREA.
*      provides (read-only) fields from secondary tables related
*      to primary tables by foreignkey relationships
ZRLE_T001-MANDT =
ZRLE_V002-MANDT .
ZRLE_T001-APPLICATION =
ZRLE_V002-APPLICATION .
ZRLE_T001-RULE_NAME =
ZRLE_V002-RULE_NAME .
ZRLE_T001-CONTROLLER_CLASS =
ZRLE_V002-CONTROLLER_CLASS .
    SELECT SINGLE * FROM ZRLE_T007 WHERE
APPLICATION = ZRLE_T001-APPLICATION .
    IF SY-SUBRC EQ 0.
    ELSE.
      CLEAR SY-SUBRC.
    ENDIF.
ENDFORM.
*...processing: ZRLE_V003.......................................*
FORM GET_DATA_ZRLE_V003.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZRLE_T002 WHERE
(VIM_WHERETAB) .
    CLEAR ZRLE_V003 .
ZRLE_V003-MANDT =
ZRLE_T002-MANDT .
ZRLE_V003-APPLICATION =
ZRLE_T002-APPLICATION .
ZRLE_V003-PROCESS_NAME =
ZRLE_T002-PROCESS_NAME .
ZRLE_V003-SAVE_TRACE =
ZRLE_T002-SAVE_TRACE .
    SELECT SINGLE * FROM ZRLE_T002T WHERE
APPLICATION = ZRLE_T002-APPLICATION AND
PROCESS_NAME = ZRLE_T002-PROCESS_NAME AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZRLE_V003-PROCESS_DESC =
ZRLE_T002T-PROCESS_DESC .
    ENDIF.
<VIM_TOTAL_STRUC> = ZRLE_V003.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZRLE_V003 .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZRLE_V003.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZRLE_V003-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZRLE_T002 WHERE
  APPLICATION = ZRLE_V003-APPLICATION AND
  PROCESS_NAME = ZRLE_V003-PROCESS_NAME .
    IF SY-SUBRC = 0.
    DELETE ZRLE_T002 .
    ENDIF.
    DELETE FROM ZRLE_T002T WHERE
    APPLICATION = ZRLE_T002-APPLICATION AND
    PROCESS_NAME = ZRLE_T002-PROCESS_NAME .
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZRLE_T002 WHERE
  APPLICATION = ZRLE_V003-APPLICATION AND
  PROCESS_NAME = ZRLE_V003-PROCESS_NAME .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZRLE_T002.
    ENDIF.
ZRLE_T002-MANDT =
ZRLE_V003-MANDT .
ZRLE_T002-APPLICATION =
ZRLE_V003-APPLICATION .
ZRLE_T002-PROCESS_NAME =
ZRLE_V003-PROCESS_NAME .
ZRLE_T002-SAVE_TRACE =
ZRLE_V003-SAVE_TRACE .
    IF SY-SUBRC = 0.
    UPDATE ZRLE_T002 ##WARN_OK.
    ELSE.
    INSERT ZRLE_T002 .
    ENDIF.
    SELECT SINGLE FOR UPDATE * FROM ZRLE_T002T WHERE
    APPLICATION = ZRLE_T002-APPLICATION AND
    PROCESS_NAME = ZRLE_T002-PROCESS_NAME AND
    SPRAS = SY-LANGU .
      IF SY-SUBRC <> 0.   "insert preprocessing: init WA
        CLEAR ZRLE_T002T.
ZRLE_T002T-APPLICATION =
ZRLE_T002-APPLICATION .
ZRLE_T002T-PROCESS_NAME =
ZRLE_T002-PROCESS_NAME .
ZRLE_T002T-SPRAS =
SY-LANGU .
      ENDIF.
ZRLE_T002T-PROCESS_DESC =
ZRLE_V003-PROCESS_DESC .
    IF SY-SUBRC = 0.
    UPDATE ZRLE_T002T ##WARN_OK.
    ELSE.
    INSERT ZRLE_T002T .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZRLE_V003-UPD_FLAG,
STATUS_ZRLE_V003-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZRLE_V003.
  SELECT SINGLE * FROM ZRLE_T002 WHERE
APPLICATION = ZRLE_V003-APPLICATION AND
PROCESS_NAME = ZRLE_V003-PROCESS_NAME .
ZRLE_V003-MANDT =
ZRLE_T002-MANDT .
ZRLE_V003-APPLICATION =
ZRLE_T002-APPLICATION .
ZRLE_V003-PROCESS_NAME =
ZRLE_T002-PROCESS_NAME .
ZRLE_V003-SAVE_TRACE =
ZRLE_T002-SAVE_TRACE .
    SELECT SINGLE * FROM ZRLE_T002T WHERE
APPLICATION = ZRLE_T002-APPLICATION AND
PROCESS_NAME = ZRLE_T002-PROCESS_NAME AND
SPRAS = SY-LANGU .
    IF SY-SUBRC EQ 0.
ZRLE_V003-PROCESS_DESC =
ZRLE_T002T-PROCESS_DESC .
    ELSE.
      CLEAR SY-SUBRC.
      CLEAR ZRLE_V003-PROCESS_DESC .
    ENDIF.
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZRLE_V003 USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZRLE_V003-APPLICATION TO
ZRLE_T002-APPLICATION .
MOVE ZRLE_V003-PROCESS_NAME TO
ZRLE_T002-PROCESS_NAME .
MOVE ZRLE_V003-MANDT TO
ZRLE_T002-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZRLE_T002'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZRLE_T002 TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZRLE_T002'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

MOVE ZRLE_T002-APPLICATION TO
ZRLE_T002T-APPLICATION .
MOVE ZRLE_T002-PROCESS_NAME TO
ZRLE_T002T-PROCESS_NAME .
MOVE SY-LANGU TO
ZRLE_T002T-SPRAS .
MOVE ZRLE_V003-MANDT TO
ZRLE_T002T-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZRLE_T002T'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZRLE_T002T TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZRLE_T002T'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*

* base table related FORM-routines.............
INCLUDE LSVIMFTX .
